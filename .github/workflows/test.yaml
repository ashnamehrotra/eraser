name: test
on:
  push:
    paths-ignore:
      - "**.md"
      - "hack/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - "hack/**"
env:
  REGISTRY: ghcr.io

permissions: read-all

jobs:
  # lint:
  #   name: "Lint"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Go 1.18
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.18
  #     - name: lint manager
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: latest
  #     - name: lint eraser
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: latest
  #         working-directory: pkg/eraser
  #         skip-pkg-cache: true
  #     - name: lint collector
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: latest
  #         working-directory: pkg/collector
  #         skip-pkg-cache: true
  #     - name: lint trivvy scanner
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: latest
  #         working-directory: pkg/scanners/trivy
  #         skip-pkg-cache: true

  # unit-test:
  #   name: "Unit Tests"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - name: Set up Go 1.18
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.18
  #     - uses: actions/cache@v3.0.4
  #       with:
  #         key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  #         path: |
  #           ~/go/pkg/mod
  #           ~/.cache/go-build
  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v3
  #     - name: Unit test
  #       run: make test

  # codeql:
  #   name: "CodeQL"
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   timeout-minutes: 20
  #   steps:
  #     - name: Set up Go 1.18
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.18
  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v3
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v2
  #       with:
  #         languages: go
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@27ea8f8fe5977c00f5b37e076ab846c5bd783b96
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v2

  # check-manifest:
  #   name: "Check Manifest"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v3
  #     - name: Set up Go 1.18
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.18
  #     - name: Check go.mod and manifests
  #       run: |
  #         go mod tidy
  #         git diff --exit-code
  #         make manifests
  #         git diff --exit-code

  e2e-test-imagelist:
    name: "E2E test (ImageList)"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Setup buildx instance
        uses: docker/setup-buildx-action@v2
        with:
          use: true
      - uses: actions/cache@v3.0.3
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
      - uses: crazy-max/ghaction-github-runtime@v2
      - name: Build eraser-manager
        run: make docker-build-manager CACHE_FROM=type=gha,scope=eraser-manager CACHE_TO=type=gha,scope=eraser-manager,mode=max
      - name: Build eraser
        run: make docker-build-eraser CACHE_FROM=type=gha,scope=eraser-node CACHE_TO=type=gha,scope=eraser-node,mode=max
      - name: Run e2e test
        run: make e2e-test-imagelist

  e2e-test-imagecollector:
    name: "E2E test (ImageCollector)"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Setup buildx instance
        uses: docker/setup-buildx-action@v2
        with:
          use: true
      - uses: actions/cache@v3.0.4
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
      - uses: crazy-max/ghaction-github-runtime@v2
      - name: Build eraser-manager
        run: make docker-build-manager CACHE_FROM=type=gha,scope=eraser-manager CACHE_TO=type=gha,scope=eraser-manager,mode=max
      - name: Build eraser
        run: make docker-build-eraser CACHE_FROM=type=gha,scope=eraser-node CACHE_TO=type=gha,scope=eraser-node,mode=max
      - name: Build collector
        run: make docker-build-collector CACHE_FROM=type=gha,scope=collector CACHE_TO=type=gha,scope=collector,mode=max
      - name: Build trivy-scanner
        run: make docker-build-trivy-scanner CACHE_FROM=type=gha,scope=trivy-scanner CACHE_TO=type=gha,scope=trivy-scanner,mode=max
      - name: Run e2e test
        run: make e2e-test-collector

  # scan_vulnerabilities:
  #   name: "[Trivy] Scan for vulnerabilities"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v3

  #     - name: Get repo
  #       run: |
  #         echo "REPO=$(echo $GITHUB_REPOSITORY | awk '{print tolower($0)}')" >> $GITHUB_ENV
  #     - name: Download trivy
  #       run: |
  #         pushd $(mktemp -d)
  #         wget https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz
  #         tar zxvf trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz
  #         echo "$(pwd)" >> $GITHUB_PATH
  #       env:
  #         TRIVY_VERSION: "0.28.0"

  #     - name: Build eraser-manager
  #       run: |
  #         make docker-build-manager MANAGER_IMG=${{ env.REGISTRY }}/${REPO}-manager:test
  #     - name: Build eraser
  #       run: |
  #         make docker-build-eraser ERASER_IMG=${{ env.REGISTRY }}/${REPO}:test

  #     - name: Build collector
  #       run: |
  #         make docker-build-collector COLLECTOR_IMG=${{ env.REGISTRY }}/collector:test

  #     - name: Build trivy scanner
  #       run: |
  #         make docker-build-trivy-scanner TRIVY_SCANNER_IMG=${{ env.REGISTRY }}/${REPO}-trivy-scanner:test

  #     - name: Run trivy for eraser
  #       run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}:test

  #     - name: Run trivy for eraser-manager
  #       run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}-manager:test

  #     - name: Run trivy for collector
  #       run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/collector:test

  #     - name: Run trivy for trivy-scanner
  #       run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}-trivy-scanner:test
