name: test
on:
  push:
    paths-ignore:
      - "**.md"
      - "hack/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - "hack/**"
env:
  REGISTRY: ghcr.io

permissions: read-all

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@74b568e8591fbb3115c70f3436a0c6b0909a8504
        with:
          egress-policy: audit
      - uses: actions/checkout@v3
      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: lint manager
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
      - name: lint eraser
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: pkg/eraser
          skip-pkg-cache: true
      - name: lint collector
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: pkg/collector
          skip-pkg-cache: true
      - name: lint trivvy scanner
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: pkg/scanners/trivy
          skip-pkg-cache: true

  unit-test:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@74b568e8591fbb3115c70f3436a0c6b0909a8504
        with:
          egress-policy: audit
      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: actions/cache@v3
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Unit test
        run: make test

  check-manifest:
    name: "Check Manifest"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@74b568e8591fbb3115c70f3436a0c6b0909a8504
        with:
          egress-policy: audit
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Check go.mod and manifests
        run: |
          go mod tidy
          git diff --exit-code
          make manifests
          git diff --exit-code

  e2e-test:
    name: "E2E tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        KUBERNETES_VERSION: ["1.22.9", "1.23.6", "1.24.1"]
        E2E_TEST:
          - collector_disable_scan
          - collector_pipeline
          - collector_skip_excluded
          - imagelist_alias
          - imagelist_change
          - imagelist_exclusion_list
          - imagelist_prune_images
          - imagelist_rm_images
          - imagelist_skip_nodes
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@74b568e8591fbb3115c70f3436a0c6b0909a8504
        with:
          egress-policy: audit
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Set up Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Setup buildx instance
        uses: docker/setup-buildx-action@v2
        with:
          use: true
      - uses: actions/cache@v3
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
      - uses: crazy-max/ghaction-github-runtime@v2
      - name: Build eraser-manager
        run: make docker-build-manager
      - name: Build eraser
        run: make docker-build-eraser
      - name: Build collector
        run: make docker-build-collector
      - name: Build trivy-scanner
        run: make docker-build-trivy-scanner
      - name: Run e2e test
        run: make e2e-test KUBERNETES_VERSION=${{ matrix.KUBERNETES_VERSION }} E2E_TESTS=${{ matrix.E2E_TEST }}

  scan_vulnerabilities:
    name: "[Trivy] Scan for vulnerabilities"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@74b568e8591fbb3115c70f3436a0c6b0909a8504
        with:
          egress-policy: audit

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Get repo
        run: |
          echo "REPO=$(echo $GITHUB_REPOSITORY | awk '{print tolower($0)}')" >> $GITHUB_ENV
      - name: Download trivy
        run: |
          pushd $(mktemp -d)
          wget https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz
          tar zxvf trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz
          echo "$(pwd)" >> $GITHUB_PATH
        env:
          TRIVY_VERSION: "0.28.0"

      - name: Build eraser-manager
        run: |
          make docker-build-manager MANAGER_IMG=${{ env.REGISTRY }}/${REPO}-manager:test
      - name: Build eraser
        run: |
          make docker-build-eraser ERASER_IMG=${{ env.REGISTRY }}/${REPO}:test

      - name: Build collector
        run: |
          make docker-build-collector COLLECTOR_IMG=${{ env.REGISTRY }}/collector:test

      - name: Build trivy scanner
        run: |
          make docker-build-trivy-scanner TRIVY_SCANNER_IMG=${{ env.REGISTRY }}/${REPO}-trivy-scanner:test

      - name: Run trivy for eraser
        run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}:test

      - name: Run trivy for eraser-manager
        run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}-manager:test

      - name: Run trivy for collector
        run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/collector:test

      - name: Run trivy for trivy-scanner
        run: trivy image --ignore-unfixed --exit-code=1 --vuln-type=os,library ${{ env.REGISTRY }}/${REPO}-trivy-scanner:test
