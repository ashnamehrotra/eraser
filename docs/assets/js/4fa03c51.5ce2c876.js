"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[395],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>d});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),c=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=c(e.components);return t.createElement(i.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(i,".").concat(d)]||u[d]||m[d]||l;return n?t.createElement(g,o(o({ref:r},p),{},{components:n})):t.createElement(g,o({ref:r},p))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=u;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<l;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7422:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var t=n(7462),a=(n(7294),n(3905));const l={title:"Manual Removal"},o=void 0,s={unversionedId:"manual-removal",id:"manual-removal",title:"Manual Removal",description:"Create an ImageList and specify the images you would like to remove. In this case, the image docker.io/library/alpine:3.7.3 will be removed.",source:"@site/docs/manual-removal.md",sourceDirName:".",slug:"/manual-removal",permalink:"/eraser/docs/manual-removal",draft:!1,tags:[],version:"current",frontMatter:{title:"Manual Removal"},sidebar:"sidebar",previous:{title:"Quick Start",permalink:"/eraser/docs/quick-start"},next:{title:"Setup",permalink:"/eraser/docs/setup"}},i={},c=[],p={toc:c};function m(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Create an ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageList")," and specify the images you would like to remove. In this case, the image ",(0,a.kt)("inlineCode",{parentName:"p"},"docker.io/library/alpine:3.7.3")," will be removed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF | kubectl apply -f -\napiVersion: eraser.sh/v1alpha1\nkind: ImageList\nmetadata:\n  name: imagelist\nspec:\n  images:\n    - docker.io/library/alpine:3.7.3   # use "*" for all non-running images\nEOF\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"ImageList")," is a cluster-scoped resource and must be called imagelist. ",(0,a.kt)("inlineCode",{parentName:"p"},'"*"')," can be specified to remove all non-running images instead of individual images.")),(0,a.kt)("p",null,"Creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageList")," should trigger an ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageJob")," that will deploy Eraser pods on every node to perform the removal given the list of images."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods -n eraser-system\neraser-system        eraser-controller-manager-55d54c4fb6-dcglq   1/1     Running   0          9m8s\neraser-system        eraser-kind-control-plane                    1/1     Running   0          11s\neraser-system        eraser-kind-worker                           1/1     Running   0          11s\neraser-system        eraser-kind-worker2                          1/1     Running   0          11s\n")),(0,a.kt)("p",null,"Pods will run to completion and the images will be removed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods -n eraser-system\neraser-system        eraser-controller-manager-6d6d5594d4-phl2q   1/1     Running     0          4m16s\neraser-system        eraser-kind-control-plane                    0/1     Completed   0          22s\neraser-system        eraser-kind-worker                           0/1     Completed   0          22s\neraser-system        eraser-kind-worker2                          0/1     Completed   0          22s\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageList")," custom resource status field will contain the status of the last job. The success and failure counts indicate the number of nodes the Eraser agent was run on."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl describe ImageList imagelist\n...\nStatus:\n  Failed:     0\n  Success:    3\n  Timestamp:  2022-02-25T23:41:55Z\n...\n")),(0,a.kt)("p",null,"Verify the unused images are removed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker exec kind-worker ctr -n k8s.io images list | grep alpine\n")),(0,a.kt)("p",null,"If the image has been successfully removed, there will be no output."))}m.isMDXComponent=!0}}]);